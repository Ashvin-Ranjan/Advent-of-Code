// v0.0.1 (prerelease)
import FileIO

let abs = (i: int) -> int {
    if i < 0 {
        return -i
    }
    return i
}


let enumerate = [t, a] (l: list[t], default: t) -> list[(int, t)] {
    return range(0, l.len(), 1).filterMap((i: int) -> maybe[(int, t)] {
        return yes((i, l[i] | default))
    })
}

let solveNumbers = (tests: list[str], out: list[str]) -> int {
    let mut digs = ""

    let mut fourVals: list[char] = []
    let mut oneVals: list[char] = []

    for (t in tests) {
        if oneVals.len() == 0 && t.len() == 2 {
            oneVals = [t[0] | \{ }, t[1] | \{ }]
        }
        if fourVals.len() == 0 && t.len() == 4 {
            fourVals = [t[0] | \{ }, t[1] | \{ }, t[2] | \{ }, t[3] | \{ }]
        }
    }

    let mut newFour: list[char] = []

    for (i in fourVals) {
        if ~(i in oneVals) {
            newFour = newFour.append(i)
        }
    }

    fourVals = newFour

    for (o in out) {
        digs += match(o.len()) {
            2 -> "1"
            3 -> "7"
            4 -> "4"
            5 -> (
                if ((oneVals[0] | \{ }) in o) && ((oneVals[1] | \{ }) in o) { "3" }
                else if ((fourVals[0] | \{ }) in o) && ((fourVals[1] | \{ }) in o) { "5" }
                else { "2" }
            ) // Solve for 2, 3, 5
            6 -> (
                if ~((fourVals[0] | \{ }) in o) || ~((fourVals[1] | \{ }) in o) { "0" }
                else if ~((oneVals[0] | \{ }) in o) || ~((oneVals[1] | \{ }) in o) { "6" }
                else { "9" }
            ) // Solve for 6, 9, 0
            7 -> "8"
            _ -> ""
        }
    }

    return digs.parseInt() | 0
}

let main = () -> cmd[()] {
    let possibleValues = FileIO.read("input.txt")!
    if let yes(values) = possibleValues {
        // Process values into array
        let mut displayValues = values.strip().split(\n).filterMap((v: str) -> maybe[(list[str], list[str])] {
            if let [tests, out] = v.strip().split(\{|}) {
                return yes((tests.strip().split(\{ }), out.strip().split(\{ })))
            }
            return none
        })

        let mut out = 0

        for (i in displayValues) {
            out += solveNumbers(..i)
        }

        print(out)
    }
    else {
        print("Input file not found")
    }
}

let pub out = main()