// v0.0.1
import FileIO

let set = [k, v] (key: k, value: v, i: map[k, v]) -> map[k, v] {
    return mapFrom([
        ..(i |> entries),
        (key, value)
    ])
}

let main = () -> cmd[()] {
    let possibleValues = FileIO.read("input.txt")!
    if let yes(values) = possibleValues {
        let mut poly = values.split(\n)[0].default("").strip()

        let mut template: map[str, char] = mapFrom(values.split(\n).subsection(2, values.split(\n).len()).filterMap((v: str) -> maybe[(str, char)] {
            if let [case, out] = v.strip().split(\{-}) {
                return yes((case.strip(), out[-1] | \{ }))
            }
            return none
        }))
        
        print(template)

        let mut pairs: map[str, int] = mapFrom([])
        
        for (i in range(1, poly.len(), 1)) {
            pairs = set(poly.substring(i - 1, i + 1), (pairs[poly.substring(i - 1, i + 1)] | 0) + 1, pairs)
        }

        print(pairs)

        for (n in range(0, 40, 1)) {
            let frozenEntries = pairs
            for ((k, v) in (pairs |> entries)) {
                if let yes(ins) = getValue(k, template) {
                    pairs = set(k, (pairs[k] | 0) - (frozenEntries[k] | 0), pairs)
                    pairs = set((k[0] | \{ }) + ins, (pairs[(k[0] | \{ }) + ins] | 0) + v, pairs)
                    pairs = set(ins + (k[1] | \{ }), (pairs[ins + (k[1] | \{ })] | 0) + v, pairs)
                }
            }

            print(n)
        }
        let mut counts: map[char, int] = mapFrom([])

        for ((k, v) in (pairs |> entries)) {
            counts = set(k[0] | \{ }, (counts[k[0] | \{ }] | 0) + v, counts)
            counts = set(k[1] | \{ }, (counts[k[1] | \{ }] | 0) + v, counts)
        }
        counts = set(poly[0] | \{ }, (counts[poly[0] | \{ }] | 0) + 1, counts)
        counts = set(poly[-1] | \{ }, (counts[poly[-1] | \{ }] | 0) + 1, counts)
        counts = mapFrom((counts |> entries).filterMap(((k, v): (char, int)) -> maybe[(char, int)] {
            return yes((k, v/2))
        }))

        print(counts)

        let mut min = 2;

        (pairs |> entries).filterMap(((_, v): (str, int)) -> maybe[int] {
            min += v
            return yes(v)
        })

        let mut max = 0

        for ((_, v) in (counts |> entries)) {
            if v > max {
                max = v
            }
            if min > v {
                min = v
            }
        }

        print(max - min)
    }
    else {
        print("Input file not found")
    }
}

let pub out = main()