// v0.0.1 (prerelease)
import FileIO

let abs = (i: int) -> int {
    if i < 0 {
        return -i
    }
    return i
}


let enumerate = [t, a] (l: list[t], default: t) -> list[(int, t)] {
    return range(0, l.len(), 1).filterMap((i: int) -> maybe[(int, t)] {
        return yes((i, l[i] | default))
    })
}

let main = () -> cmd[()] {
    let possibleValues = FileIO.read("input.txt")!
    if let yes(values) = possibleValues {
        // Process values into array
        let mut lines = values.strip().split(\n).filterMap((v: str) -> maybe[str] {
            return yes(v.strip())
        })

        let mut scores: list[int] = []

        let open = [\{(}, \{[}, \{{}, \{<}]
        let close = [\{)}, \{]}, \{}}, \{>}]

        for (line in lines) {
            let mut stack: list[char] = []
            let mut e = false
            for (i in range(0, line.len(), 1)) {
                if let yes(c) = line[i] {
                    if c in open {
                        stack = stack.append(c)
                    } else {
                        if c == \{)} && (stack[-1] | \{ }) == \{(} {
                            stack = stack.subsection(0, -1)
                        } else if c == \{]} && (stack[-1] | \{ }) == \{[} {
                            stack = stack.subsection(0, -1)
                        } else if c == \{}} && (stack[-1] | \{ }) == \{{} {
                            stack = stack.subsection(0, -1)
                        } else if c == \{>} && (stack[-1] | \{ }) == \{<} {
                            stack = stack.subsection(0, -1)
                        } else {
                            e = true
                            break
                        }
                    }
                }
            }

            if ~e {
                let mut autoScore = 0
                for (i in range(stack.len() - 1, -1, -1)) {
                    if let yes(c) = stack[i] {
                        autoScore *= 5
                        autoScore += match (c) {
                            \{(} -> 1
                            \{[} -> 2
                            \{{} -> 3
                            _ -> 4
                        }
                    }
                }
                scores = scores.append(autoScore)
            }
        }

        while (scores.len() > 1) {
            let mut low = 999999999999999
            let mut high = 0
            for (score in scores) {
                if score > high {
                    high = score
                }
                if score < low {
                    low = score
                }
            }

            scores = scores.filterMap((score: int) -> maybe[int] {
                return if score == high || score == low {
                    none
                } else {
                    yes(score)
                }
            })
        }

        print(scores)
    }
    else {
        print("Input file not found")
    }
}

let pub out = main()