// v0.0.1 (prerelease)
import FileIO

let enumerate = [t, a] (l: list[t], default: t) -> list[(int, t)] {
    return range(0, l.len(), 1).filterMap((i: int) -> maybe[(int, t)] {
        return yes((i, l[i] | default))
    })
}

let main = () -> cmd[()] {
    let possibleValues = FileIO.read("input.txt")!
    if let yes(values) = possibleValues {
        // Process values into array
        let processedValues = values.split(\n).filterMap((v: str) -> maybe[((int, int, int, int))] {
            if let [starts, ends] = v.strip().split(\{-}) {
                if let [x1, y1] = starts.strip().split(\{,}) {
                    if let [x2, y2] = ends.strip().substring(2, ends.len()).split(\{,}) {
                        return yes((x1.parseInt() | 0, y1.parseInt() | 0, x2.parseInt() | 0, y2.parseInt() | 0))
                    }
                }
            }
            return none
        })

        print("Processed Values")

        let mut maxX = 0
        let mut maxY = 0
        for ((x1, y1, x2, y2) in processedValues) {
            if x1 > maxX {
                maxX = x1
            }
            if y1 > maxY {
                maxY = y1
            }
            if x2 > maxX {
                maxX = x2
            }
            if y2 > maxY {
                maxY = y2
            }
        }
        maxX += 1
        maxY += 1

        print("Found Max")

        let emptyRow = range(0, maxX, 1).filterMap((_: int) -> maybe[int] {
            return yes(0)
        })
        
        let mut ventBoard = range(0, maxY, 1).filterMap((_: int) -> maybe[list[int]] {
            return yes(emptyRow)
        })

        print("Created vent board")

        for ((x1, y1, x2, y2) in processedValues) {
            print("Processing line " + x1.toString() + "," + y1.toString() + " -> " + x2.toString() + "," + y2.toString())
            // Two of these value will be the same
            if x1 == x2 {
                let mut iter = range(y1, y2 + 1, 1)
                if y1 > y2 {
                    iter = range(y2, y1 + 1, 1)
                }
                for (y in iter) {
                    ventBoard = [
                        ..ventBoard.subsection(0, y),
                        [
                            ..(ventBoard[y] | []).subsection(0, x1),
                            (ventBoard[y][x1] | 0) + 1,
                            ..(ventBoard[y] | []).subsection(x1 + 1, (ventBoard[y] | []).len()),
                        ],
                        ..ventBoard.subsection(y + 1, ventBoard.len()),
                    ]
                }
            } else if y1 == y2 {
                let mut iter = range(x1, x2 + 1, 1)
                if x1 > x2 {
                    iter = range(x2, x1 + 1, 1)
                }
                for (x in iter) {
                    ventBoard = [
                        ..ventBoard.subsection(0, y1),
                        [
                            ..(ventBoard[y1] | []).subsection(0, x),
                            (ventBoard[y1][x] | 0) + 1,
                            ..(ventBoard[y1] | []).subsection(x + 1, (ventBoard[y1] | []).len()),
                        ],
                        ..ventBoard.subsection(y1 + 1, ventBoard.len()),
                    ]
                }
            }
        }

        print(ventBoard)

        let mut overlaps = 0

        for (row in ventBoard) {
            for (item in row) {
                if item > 1 {
                    overlaps += 1
                }
            }
        }

        print(overlaps)
    }
    else {
        print("Input file not found")
    }
}

let pub out = main()