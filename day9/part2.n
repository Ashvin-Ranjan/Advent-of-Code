// v0.0.1 (prerelease)
import FileIO

let abs = (i: int) -> int {
    if i < 0 {
        return -i
    }
    return i
}


let enumerate = [t, a] (l: list[t], default: t) -> list[(int, t)] {
    return range(0, l.len(), 1).filterMap((i: int) -> maybe[(int, t)] {
        return yes((i, l[i] | default))
    })
}

let main = () -> cmd[()] {
    let possibleValues = FileIO.read("input.txt")!
    if let yes(values) = possibleValues {
        // Process values into array
        let mut heightValues = values.strip().split(\n).filterMap((v: str) -> maybe[list[int]] {
            return yes(range(0, v.strip().len(), 1).filterMap((i: int) -> maybe[int] {
                return ((v.strip()[i] | \{ }) + "").parseInt()
            }))
        })

        let mut basins: list[int] = []

        let mut pointsChecked: list[(int, int)] = []

        for ((i, row) in enumerate(heightValues, [])) {
            for ((j, point) in enumerate(row, 9)) {
                if ~((i, j) in pointsChecked) && point ~= 9 {
                    let mut newBasin = 1
                    let mut toCheck = [
                        (i + 1, j),
                        (i - 1, j),
                        (i, j + 1),
                        (i, j - 1),
                    ].filterMap(((y, x): (int, int)) -> maybe[(int, int)] {
                        return if x < 0 || y < 0 || (heightValues[y][x] | 9) == 9 || (y, x) in pointsChecked {
                            none
                        } else {
                            yes((y, x))
                        }
                    })

                    //print(((i, j), toCheck))

                    pointsChecked = pointsChecked.append((i, j))
                    
                    while (toCheck.len() ~= 0) {
                        if let yes(check) = toCheck[0] {
                            let (y, x) = check
                            for (p in [
                                (y + 1, x),
                                (y - 1, x),
                                (y, x + 1),
                                (y, x - 1),
                            ].filterMap(((y1, x1): (int, int)) -> maybe[(int, int)] {
                                return if x1 < 0 || y1 < 0 || (heightValues[y1][x1] | 9) == 9 || (y1, x1) in pointsChecked || (y == y1 && x == x1) {
                                    none
                                } else {
                                    yes((y1, x1))
                                }
                            })) {
                                toCheck = toCheck.append(p)
                            }

                            toCheck = toCheck.filterMap(((y1, x1): (int, int)) -> maybe[(int, int)] {
                                return if (y1, x1) in pointsChecked || (y == y1 && x == x1) {
                                    none
                                } else {
                                    yes((y1, x1))
                                }
                            })

                            pointsChecked = pointsChecked.append(check)
                            newBasin += 1
                        }
                    }
                    basins = basins.append(newBasin)
                    print(basins.len())
                }
            }
        }

        let mut tops = (0, 0, 0)

        for (count in basins) {
            let (low, mid, high) = tops
            if count > high {
                tops = (mid, high, count)
            } else if count > mid {
                tops = (mid, count, high)
            } else if count > low {
                tops = (count, mid, high)
            }
        }

        let (low, mid, high) = tops
        print(low * mid * high)
        print((low, mid, high))
        print(basins)
    }
    else {
        print("Input file not found")
    }
}

let pub out = main()